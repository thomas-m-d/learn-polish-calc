{"version":3,"sources":["components/characterInputButton.js","actions/actionNames.js","components/performFunctionButton.js","components/formulaInputField.js","components/resultField.js","components/titleAndHelp.js","resources/regularExpression.js","resources/buttonCharacters.js","resources/updateInfixText.js","resources/isFormulaComplete.js","resources/updatePolishText.js","resources/updateHelp.js","reducers/rootReducer.js","store.js","resources/backspaceFunction.js","resources/clearFunction.js","resources/errorMessages.js","resources/performPEMDAS.js","resources/cleanMisplacedOperators.js","resources/equalsFunction.js","App.js","serviceWorker.js","index.js"],"names":["CharacterInputButton","props","handleKeypress","bind","event","keyCode","this","charCode","preventDefault","updateInfix","document","addEventListener","removeEventListener","className","id","buttonID","onClick","character","React","Component","connect","state","dispatch","ownProps","type","PerformFunctionButton","handleKeyEvent","charCodes","includes","performFunction","keyEvent","function","FormulaInputField","inputID","text","infixText","polishText","ResultField","pID","resultText","TitleAndHelp","updateHelp","buttonText","helpText","helpButtonText","operator","operatorNegativeDecimal","decimal","number","nonZeroNumber","consecutiveOperator","multiplyDivideAdd","multiplyDivide","addSubtract","parens","CLEARCHARCODES","BACKSPACECHARCODES","EQUALSCHARCODES","operatorArray","doesRightmostNumberHaveDecimal","formulaString","RegEx","test","numString","slice","numberStartIndex","i","length","lastIndexOf","findStringIndexOfRightmostOperator","updateInfixText","action","textToUpdate","JSON","parse","stringify","charAt","concat","unclosedParensCount","lenth","canParenthesesBeClosed","canParenthesesBeOpened","canNegativeSignBeConcated","isFormulaComplete","infixFormulaString","parenCount","isFormulaEnclosedByParens","removeEnclosingParens","updatePolishText","polishFormulaString","isNaN","replace","majorOperatorIndex","indicesOfFormulaStringToIgnore","enclosingParenCount","copiedFormulaString","push","parentheticalStartIndex","j","multiplyDivideIndices","exponentIndices","sort","a","b","findMajorOperatorIndex","majorOperator","leftFormula","rightFormula","trim","regularStyle","textAlign","margin","liStyle","helpTextShown","style","marginBottom","fontWeight","paddingLeft","marginTop","updateManual","isHelpShown","console","log","rootReducer","initialState","updatedInfixString","polishString","isNoteExpanded","Store","createStore","backspaceFunction","infixString","clearFunction","indexOfFirstMatch","stringToSearch","stringToMatchOne","stringToMatchTwo","indexOf","performOperation","operatorIndex","leftNumberStartIndex","findStartOfLeftNumber","rightNumberEndIndex","findEndOfRightNumber","leftNumber","findLeftNumber","rightNumber","numberEndIndex","findRightNumber","resultOfOperation","numStringOne","operatorString","numStringTwo","numOne","Number","numTwo","toString","Math","pow","performStringMath","performPEMDAS","parenBalance","performASOfPEMDAS","performMDOfPEMDAS","performEOfPEMDAS","closeParenIndex","openParenIndex","performPOfPEMDAS","cleanMisplacedOperators","searchString","doubleNegativeIndex","search","cleanDoubleNegatives","str","count","cleanConsecutiveOperators","cleanEndingOperators","equalsFunction","resultString","App","class","Character","Boolean","window","location","hostname","match","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6eec78ac.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { CHARACTERINPUT } from \"../actions/actionNames.js\";\n\nclass CharacterInputButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeypress = this.handleKeypress.bind(this);\n  }\n\n  handleKeypress(event) {\n    if (event.keyCode == this.props.charCode) {\n      event.preventDefault();\n      this.props.updateInfix();\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keypress\", this.handleKeypress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keypress\", this.handleKeypress);\n  }\n\n  render() {\n    return (\n      <div className=\"characterInputButtonDiv\">\n        <button\n          id={this.props.buttonID}\n          className=\"characterInputButton\"\n          onClick={this.props.updateInfix}\n        >\n          {this.props.character}\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  updateInfix: () =>\n    dispatch({\n      type: CHARACTERINPUT,\n      character: ownProps.character\n    })\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CharacterInputButton);\n","export const CHARACTERINPUT = \"CHARACTERINPUT\";\nexport const PERFORMFUNCTION = \"PERFORMFUNCTION\";\nexport const HELP = \"HELP\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { PERFORMFUNCTION } from \"../actions/actionNames.js\";\n\nclass PerformFunctionButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyEvent = this.handleKeyEvent.bind(this);\n  }\n\n  handleKeyEvent(event) {\n    if (this.props.charCodes.includes(event.keyCode))\n      this.props.performFunction();\n  }\n\n  componentDidMount() {\n    document.addEventListener(this.props.keyEvent, this.handleKeyEvent);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(this.props.keyEvent, this.handleKeyEvent);\n  }\n\n  render() {\n    return (\n      <div className=\"performFunctionButtonDiv\">\n        <button\n          id={this.props.buttonID}\n          className=\"performFunctionButton\"\n          onClick={this.props.performFunction}\n        >\n          {this.props.character}\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  performFunction: () =>\n    dispatch({\n      type: PERFORMFUNCTION,\n      function: ownProps.function\n    })\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PerformFunctionButton);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass FormulaInputField extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"formulaInputField\">\n        <p id={this.props.inputID}>{this.props.text}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  if (ownProps.type == \"infix\")\n    return {\n      text: state.infixText\n    };\n  else if (ownProps.type == \"polish\")\n    return {\n      text: state.polishText\n    };\n  else return {};\n};\n\nconst mapDispatchToProps = state => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormulaInputField);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass ResultField extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"resultField\">\n        <p id={this.props.pID}>{this.props.text}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  text: state.resultText\n});\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultField);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { HELP } from \"../actions/actionNames.js\";\n\nclass TitleAndHelp extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"titleAndHelpInnerDiv\">\n        <div className=\"titleAndHelpFlexBox\">\n          <h1 className=\"title\">Learn Polish</h1>\n          <div className=\"helpButtonDiv\">\n            <button className=\"helpButton\" onClick={this.props.updateHelp}>\n              {this.props.buttonText}\n            </button>\n          </div>\n        </div>\n        <p className=\"help\">{this.props.helpText}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  buttonText: state.helpButtonText,\n  helpText: state.helpText\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  updateHelp: () =>\n    dispatch({\n      type: HELP\n    })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TitleAndHelp);\n","export const operator = /[+\\-*/^]/;\nexport const operatorNegativeDecimal = /[+\\-*/^~\\.]/;\nexport const decimal = /\\./;\nexport const number = /[0-9]/;\nexport const nonZeroNumber = /[1-9]/;\nexport const consecutiveOperator = /[+\\-*/^][+\\-*/^]/;\nexport const multiplyDivideAdd = /[*/+]/;\nexport const multiplyDivide = /[*/]/;\nexport const addSubtract = /[+-]/;\nexport const subtract = /-/;\nexport const parens = /(\\(|\\))/;\nexport const parenthetical = /\\(.*\\)/;\n","export const ZEROCHARACTER = \"0\";\nexport const ZEROCHARCODE = 48;\n\nexport const ONECHARACTER = \"1\";\nexport const ONECHARCODE = 49;\n\nexport const TWOCHARACTER = \"2\";\nexport const TWOCHARCODE = 50;\n\nexport const THREECHARACTER = \"3\";\nexport const THREECHARCODE = 51;\n\nexport const FOURCHARACTER = \"4\";\nexport const FOURCHARCODE = 52;\n\nexport const FIVECHARACTER = \"5\";\nexport const FIVECHARCODE = 53;\n\nexport const SIXCHARACTER = \"6\";\nexport const SIXCHARCODE = 54;\n\nexport const SEVENCHARACTER = \"7\";\nexport const SEVENCHARCODE = 55;\n\nexport const EIGHTCHARACTER = \"8\";\nexport const EIGHTCHARCODE = 56;\n\nexport const NINECHARACTER = \"9\";\nexport const NINECHARCODE = 57;\n\nexport const DECIMALCHARACTER = \".\";\nexport const DECIMALCHARCODE = 46;\n\nexport const ADDCHARACTER = \"+\";\nexport const ADDCHARCODE = 43;\n\nexport const SUBTRACTCHARACTER = \"-\";\nexport const SUBTRACTCHARCODE = 45;\n\nexport const MULTIPLYCHARACTER = \"*\";\nexport const MULTIPLYCHARCODE = 42;\n\nexport const DIVIDECHARACTER = \"/\";\nexport const DIVIDECHARCODE = 47;\n\nexport const EXPONENTCHARACTER = \"^\";\nexport const EXPONENTCHARCODE = 94;\n\nexport const NEGATIVECHARACTER = \"~\";\nexport const NEGATIVECHARCODE = 126;\nexport const STRINGMATHNEGATIVECHARACTER = \"-\";\n\nexport const LEFTPARENCHARACTER = \"(\";\nexport const LEFTPARENCHARCODE = 40;\n\nexport const RIGHTPARENCHARACTER = \")\";\nexport const RIGHTPARENCHARCODE = 41;\n\nexport const CLEARCHARACTER = \"C\";\nexport const CLEARCHARCODES = [46];\nexport const CLEARKEYEVENT = \"keydown\";\n\nexport const BACKSPACECHARACTER = \"BS\";\nexport const BACKSPACECHARCODES = [8];\nexport const BACKSPACEKEYEVENT = \"keydown\";\n\nexport const EQUALSCHARACTER = \"=\";\nexport const EQUALSCHARCODES = [13, 61];\nexport const EQUALSKEYEVENT = \"keypress\";\n\nexport const SEPARATORCHARACTER = \" \";\n","import { initialState } from \"../store.js\";\nimport * as RegEx from \"./regularExpression.js\";\nimport * as Character from \"./buttonCharacters.js\";\n\nconst operatorArray = [\n  Character.ADDCHARACTER,\n  Character.SUBTRACTCHARACTER,\n  Character.MULTIPLYCHARACTER,\n  Character.DIVIDECHARACTER,\n  Character.EXPONENTCHARACTER\n];\n\nconst doesRightmostNumberStartWithZero = formulaString => {\n  if (\n    (formulaString.length == 1 &&\n      formulaString.charAt(0) == Character.ZEROCHARACTER) ||\n    (RegEx.operator.test(formulaString.charAt(formulaString.length - 2)) &&\n      formulaString.charAt(formulaString.length - 1) == Character.ZEROCHARACTER)\n  )\n    return true;\n  else return false;\n};\n\nconst findStringIndexOfRightmostOperator = formulaString => {\n  let numberStartIndex = 0;\n  for (let i = 0; i < operatorArray.length - 1; i++) {\n    if (numberStartIndex < formulaString.lastIndexOf(operatorArray[i]))\n      numberStartIndex = formulaString.lastIndexOf(operatorArray[i]);\n  }\n  return numberStartIndex;\n};\n\nconst doesRightmostNumberHaveDecimal = formulaString => {\n  if (!RegEx.operator.test(formulaString))\n    return RegEx.decimal.test(formulaString) ? true : false;\n  else {\n    let numString = formulaString.slice(\n      findStringIndexOfRightmostOperator(formulaString) + 1\n    );\n    return RegEx.decimal.test(numString) ? true : false;\n  }\n};\n\nconst isStringSimpleFormula = formulaString => {\n  if (!RegEx.operator.test(formulaString) || RegEx.parens.test(formulaString))\n    return false;\n\n  let leftNumString = formulaString\n    .slice(0, formulaString.search(RegEx.operator))\n    .replace(Character.NEGATIVECHARACTER, Character.SUBTRACTCHARACTER);\n\n  let rightNumString = formulaString\n    .slice(formulaString.search(RegEx.operator) + 1)\n    .replace(Character.NEGATIVECHARACTER, Character.SUBTRACTCHARACTER);\n\n  if (\n    leftNumString.length == 0 ||\n    rightNumString.length == 0 ||\n    Number.isNaN(Number(leftNumString)) ||\n    Number.isNaN(Number(rightNumString))\n  )\n    return false;\n  else return true;\n};\n\nconst isStringComplexFormulaWithOpenParens = formulaString => {\n  let simplifiedFormulaString = JSON.parse(JSON.stringify(formulaString));\n  let dount = 0;\n\n  console.log(\"simplifiedFormulaString is: \" + simplifiedFormulaString);\n  console.log(RegEx.parenthetical.exec(simplifiedFormulaString));\n\n  while (RegEx.parenthetical.test(simplifiedFormulaString) && dount < 5) {\n    console.log(dount);\n    simplifiedFormulaString = simplifiedFormulaString.replace(\n      RegEx.parenthetical,\n      \"\"\n    );\n    dount++;\n  }\n\n  if (simplifiedFormulaString.search(Character.LEFTPARENCHARACTER) >= 0)\n    return true;\n  else return false;\n};\n\nconst canParenthesesBeOpened = formulaString => {\n  if (\n    RegEx.operator.test(formulaString[formulaString.length - 1]) ||\n    formulaString[formulaString.length - 1] == Character.LEFTPARENCHARACTER\n  )\n    return true;\n  else return false;\n};\n\nconst canParenthesesBeClosed = formulaString => {\n  let unclosedParensCount = 0;\n\n  for (let i = 0; i < formulaString.length; i++) {\n    if (formulaString[i] == Character.LEFTPARENCHARACTER) unclosedParensCount++;\n    else if (formulaString[i] == Character.RIGHTPARENCHARACTER)\n      unclosedParensCount--;\n  }\n\n  return unclosedParensCount > 0 &&\n    (formulaString[formulaString.lenth - 1] == Character.RIGHTPARENCHARACTER ||\n      RegEx.number.test(formulaString[formulaString.length - 1]))\n    ? true\n    : false;\n};\n\nconst canNegativeSignBeConcated = formulaString => {\n  if (\n    RegEx.operator.test(formulaString.charAt(formulaString.length - 1)) ||\n    formulaString.charAt(formulaString.length - 1) ==\n      Character.NEGATIVECHARACTER ||\n    formulaString.charAt(formulaString.length - 1) ==\n      Character.LEFTPARENCHARACTER\n  )\n    return true;\n  else return false;\n};\n\nexport default function updateInfixText(state, action) {\n  let textToUpdate = JSON.parse(JSON.stringify(state.infixText));\n  if (action.character == Character.ZEROCHARACTER) {\n    if (doesRightmostNumberStartWithZero(textToUpdate)) return textToUpdate;\n    else return textToUpdate.concat(action.character);\n  } else if (action.character == Character.DECIMALCHARACTER) {\n    if (doesRightmostNumberHaveDecimal(textToUpdate)) return textToUpdate;\n    else return textToUpdate.concat(action.character);\n  } else if (action.character == Character.RIGHTPARENCHARACTER) {\n    if (canParenthesesBeClosed(textToUpdate))\n      return textToUpdate.concat(action.character);\n    else return textToUpdate;\n  } else if (action.character == Character.LEFTPARENCHARACTER) {\n    if (\n      textToUpdate.length == 1 &&\n      textToUpdate.charAt(0) == Character.ZEROCHARACTER\n    )\n      return action.character;\n    else if (canParenthesesBeOpened(textToUpdate))\n      return textToUpdate.concat(action.character);\n    else return textToUpdate;\n  } else if (action.character == Character.NEGATIVECHARACTER) {\n    if (\n      textToUpdate.length == 1 &&\n      textToUpdate.charAt(0) == Character.ZEROCHARACTER\n    )\n      return action.character;\n    else if (canNegativeSignBeConcated(textToUpdate))\n      return textToUpdate.concat(action.character);\n    else return textToUpdate;\n  } else if (RegEx.operator.test(action.character)) {\n    if (\n      RegEx.operator.test(textToUpdate[textToUpdate.length - 1]) ||\n      textToUpdate[textToUpdate.length - 1] == Character.LEFTPARENCHARACTER\n    )\n      return textToUpdate;\n    else return textToUpdate.concat(action.character);\n  } else if (RegEx.nonZeroNumber.test(action.character)) {\n    if (\n      textToUpdate.length == 1 &&\n      textToUpdate.charAt(0) == Character.ZEROCHARACTER\n    )\n      return action.character;\n    else return textToUpdate.concat(action.character);\n  } else return textToUpdate.concat(action.character);\n}\n","import * as RegEx from \"./regularExpression.js\";\nimport * as Character from \"./buttonCharacters.js\";\n\nexport default function isFormulaComplete(infixFormulaString) {\n  let parenCount = 0;\n\n  for (let i = 0; i < infixFormulaString.length; i++) {\n    if (infixFormulaString.charAt(i) == Character.LEFTPARENCHARACTER)\n      parenCount++;\n    else if (infixFormulaString.charAt(i) == Character.RIGHTPARENCHARACTER)\n      parenCount--;\n  }\n\n  if (\n    parenCount != 0 ||\n    RegEx.operatorNegativeDecimal.test(\n      infixFormulaString.charAt(infixFormulaString.length - 1)\n    )\n  )\n    return false;\n  else return true;\n}\n","import * as RegEx from \"./regularExpression.js\";\nimport * as Character from \"./buttonCharacters.js\";\n\nconst isFormulaEnclosedByParens = infixFormulaString => {\n  if (\n    infixFormulaString.charAt(0) == Character.LEFTPARENCHARACTER &&\n    infixFormulaString.charAt(infixFormulaString.length - 1) ==\n      Character.RIGHTPARENCHARACTER\n  ) {\n    let parenCount = 0;\n    for (let i = 1; i < infixFormulaString.length - 2; i++) {\n      if (infixFormulaString.charAt(i) == Character.LEFTPARENCHARACTER)\n        parenCount++;\n      else if (infixFormulaString.charAt(i) == Character.RIGHTPARENCHARACTER)\n        parenCount--;\n\n      if (parenCount < 0) return false;\n    }\n    return true;\n  } else return false;\n};\n\nconst removeEnclosingParens = infixFormulaString => {\n  return infixFormulaString.slice(1, infixFormulaString.length - 1);\n};\n\nconst findMajorOperatorIndex = infixFormulaString => {\n  let indicesOfFormulaStringToIgnore = [];\n\n  if (isFormulaEnclosedByParens(infixFormulaString)) {\n    let enclosingParenCount = 0;\n    let copiedFormulaString = removeEnclosingParens(\n      JSON.parse(JSON.stringify(infixFormulaString))\n    );\n\n    while (isFormulaEnclosedByParens(copiedFormulaString)) {\n      enclosingParenCount++;\n      removeEnclosingParens(copiedFormulaString);\n    }\n\n    for (let i = 0; i <= enclosingParenCount; i++)\n      indicesOfFormulaStringToIgnore.push(i);\n\n    for (\n      let i = infixFormulaString.length - (1 + enclosingParenCount);\n      i < infixFormulaString.length;\n      i++\n    )\n      indicesOfFormulaStringToIgnore.push(i);\n  }\n\n  let parentheticalStartIndex = 0;\n  let parenCount = 0;\n\n  for (let i = 0; i < infixFormulaString.length; i++) {\n    if (!indicesOfFormulaStringToIgnore.includes(i)) {\n      if (infixFormulaString.charAt(i) == Character.LEFTPARENCHARACTER) {\n        if (parenCount == 0) parentheticalStartIndex = i;\n        parenCount++;\n      } else if (\n        infixFormulaString.charAt(i) == Character.RIGHTPARENCHARACTER\n      ) {\n        parenCount--;\n        if (parenCount == 0) {\n          for (let j = parentheticalStartIndex; j <= i; j++)\n            indicesOfFormulaStringToIgnore.push(j);\n        }\n      }\n    }\n  }\n\n  let multiplyDivideIndices = [];\n  let exponentIndices = [];\n\n  for (let i = infixFormulaString.length - 1; i >= 0; i--) {\n    if (!indicesOfFormulaStringToIgnore.includes(i)) {\n      if (RegEx.addSubtract.test(infixFormulaString.charAt(i))) return i;\n      else if (RegEx.multiplyDivide.test(infixFormulaString.charAt(i)))\n        multiplyDivideIndices.push(i);\n      else if (infixFormulaString.charAt(i) == Character.EXPONENTCHARACTER)\n        exponentIndices.push(i);\n    }\n  }\n\n  if (multiplyDivideIndices.length > 0)\n    return multiplyDivideIndices.sort((a, b) => a - b)[\n      multiplyDivideIndices.length - 1\n    ];\n  else if (exponentIndices.length > 0)\n    return exponentIndices.sort((a, b) => a - b)[exponentIndices.length - 1];\n  else return -1;\n};\n\nexport default function updatePolishText(infixFormulaString) {\n  let polishFormulaString = JSON.parse(JSON.stringify(infixFormulaString));\n\n  while (isFormulaEnclosedByParens(polishFormulaString)) {\n    polishFormulaString = removeEnclosingParens(polishFormulaString);\n  }\n\n  if (\n    !isNaN(\n      polishFormulaString.replace(\n        Character.NEGATIVECHARACTER,\n        Character.STRINGMATHNEGATIVECHARACTER\n      )\n    )\n  )\n    return polishFormulaString.trim();\n  else {\n    let majorOperatorIndex = findMajorOperatorIndex(polishFormulaString);\n    let majorOperator = polishFormulaString\n      .charAt(majorOperatorIndex)\n      .concat(Character.SEPARATORCHARACTER);\n\n    let leftFormula = updatePolishText(\n      polishFormulaString.slice(0, majorOperatorIndex)\n    ).concat(Character.SEPARATORCHARACTER);\n    let rightFormula = updatePolishText(\n      polishFormulaString.slice(majorOperatorIndex + 1)\n    ).concat(Character.SEPARATORCHARACTER);\n\n    polishFormulaString = majorOperator\n      .concat(leftFormula)\n      .concat(rightFormula);\n\n    return polishFormulaString.trim();\n  }\n}\n","import React from \"react\";\n\nconst regularStyle = {\n  textAlign: \"justify\",\n  margin: \"0 0 .35em 0\"\n};\nconst ulHeadingStyle = {\n  textAlign: \"justify\",\n  marginBottom: \".25em\",\n  fontWeight: \"bold\"\n};\nconst ulStyle = {\n  textAlign: \"justify\",\n  paddingLeft: \"1em\",\n  marginTop: \"0\"\n};\nconst liStyle = {\n  margin: \"0 0 .35em 0\"\n};\n\nexport const buttonTextShow = \"Show Help\";\nexport const buttonTextHide = \"Hide Help\";\nexport const helpTextHidden = \"\";\nexport const helpTextShown = (\n  <div>\n    <p style={regularStyle}>\n      Polish Notation (also known as Prefix Notation) is a set of conventions\n      for writing mathematical formulae where the operators precede the numbers\n      (or other mathematical objects) that they operate upon. Also, when every\n      operator is unambiguous, Polish Notation allows one to represent formulae\n      unambiguously without needing parentheses.\n    </p>\n    <p style={regularStyle}>\n      This calculator is intended to help the user learn the basics of Polish\n      Notation. Either by clicking the in-app buttons or by typing the\n      corresponding keys on their keyboard, the user can enter arithmetic\n      formulae into the top line of the calculator using the more familiar Infix\n      Notation that other calculators use (where operators occur between the\n      numbers they operate upon). The middle line will automatically display the\n      same formulae formatted in Polish Notation. When a formula is evaluated,\n      the result will appear in the bottom line of the calculator.\n    </p>\n    <p style={regularStyle}>\n      There are two primary advantages to learning Polish Notation, one\n      practical and one aesthetic. First, Polish Notation is used in certain\n      programming languages (with LISP as one of the more notable), so to learn\n      these languages one needs a familiarity with Polish Notation. Second, and\n      more importantly, is the mathematical elegance that comes with no longer\n      needing parentheses.\n    </p>\n    <p style={ulHeadingStyle}>Usage Notes:</p>\n    <ul style={ulStyle}>\n      <li style={liStyle}>\n        Unlike most calculators, which use the symbol '-' ambiguously to\n        represent both subtraction (i.e. 1-1) and negation (i.e. -1), this\n        calculator uses '-' to represent only subtraction. '~' is used to\n        represent negation. This is to ensure no parentheses are needed in this\n        calculator's use of Polish Notion.\n      </li>\n      <li style={liStyle}>\n        The 'BS' button deletes the final character in the top-most line of the\n        calculator. It can be triggered by typing the Backspace key.\n      </li>\n      <li style={liStyle}>\n        The 'C' button clears all characters from the calculator. It can be\n        triggered by typing the Delete key.\n      </li>\n      <li style={liStyle}>\n        The '=' button can be triggered by typing the Equals Sign key or the\n        Enter key.\n      </li>\n    </ul>\n  </div>\n);\n\nexport default function updateManual(state) {\n  if (state.isHelpShown) {\n    console.log(\"in if\");\n    return {\n      ...state,\n      isHelpShown: false,\n      helpButtonText: buttonTextShow,\n      helpText: helpTextHidden\n    };\n  } else {\n    console.log(\"in else\");\n    return {\n      ...state,\n      isHelpShown: true,\n      helpButtonText: buttonTextHide,\n      helpText: helpTextShown\n    };\n  }\n}\n","import { initialState } from \"../store.js\";\nimport * as Actions from \"../actions/actionNames\";\nimport updateInfixText from \"../resources/updateInfixText.js\";\nimport isFormulaComplete from \"../resources/isFormulaComplete.js\";\nimport updatePolishText from \"../resources/updatePolishText.js\";\nimport updateHelp from \"../resources/updateHelp.js\";\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Actions.CHARACTERINPUT:\n      let updatedInfixString = updateInfixText(state, action);\n      let polishString = isFormulaComplete(updatedInfixString)\n        ? updatePolishText(updatedInfixString)\n        : state.polishText;\n\n      return {\n        ...state,\n        infixText: updatedInfixString,\n        polishText: polishString,\n        resultText: initialState.resultText,\n        isNoteExpanded: state.isNoteExpanded\n      };\n    case Actions.PERFORMFUNCTION:\n      return action.function(state);\n    case Actions.HELP:\n      return updateHelp(state);\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { buttonTextShow, helpTextHidden } from \"./resources/updateHelp.js\";\n\nexport const initialState = {\n  infixText: \"0\",\n  polishText: \"0\",\n  resultText: \"\",\n  isHelpShown: false,\n  helpButtonText: buttonTextShow,\n  helpText: helpTextHidden\n};\n\nconst Store = createStore(rootReducer);\nexport default Store;\n","import { initialState } from \"../store.js\";\nimport updatePolishText from \"./updatePolishText.js\";\nimport isFormulaComplete from \"./isFormulaComplete.js\";\n\nexport default function backspaceFunction(state) {\n  let infixString = \"\";\n  if (state.infixText.length == 1) infixString = initialState.infixText;\n  else\n    infixString = JSON.parse(JSON.stringify(state.infixText)).slice(\n      0,\n      state.infixText.length - 1\n    );\n\n  let polishString = \"\";\n  if (isFormulaComplete(infixString)) {\n    polishString = updatePolishText(infixString);\n  } else polishString = state.polishText;\n\n  return {\n    ...state,\n    infixText: infixString,\n    polishText: polishString,\n    resultText: initialState.resultText\n  };\n}\n","import { initialState } from \"../store.js\";\n\nexport default function clearFunction(state) {\n  return {\n    ...state,\n    infixText: initialState.infixText,\n    polishText: initialState.polishText,\n    resultText: initialState.resultText\n  };\n}\n","export const UNBALANCEDPARENTHESESERROR = \"Check Parentheses\";\nexport const INCOMPLETEFORMULAERROR = \"Incomplete Formula\";\n","import * as RegEx from \"./regularExpression.js\";\nimport * as Character from \"./buttonCharacters.js\";\nimport * as Error from \"./errorMessages.js\";\n\nconst indexOfFirstMatch = (\n  stringToSearch,\n  stringToMatchOne,\n  stringToMatchTwo\n) => {\n  if (\n    stringToSearch.indexOf(stringToMatchOne) < 0 &&\n    stringToSearch.indexOf(stringToMatchTwo) >= 0\n  )\n    return stringToSearch.indexOf(stringToMatchTwo);\n  else if (\n    stringToSearch.indexOf(stringToMatchTwo) < 0 &&\n    stringToSearch.indexOf(stringToMatchOne) >= 0\n  )\n    return stringToSearch.indexOf(stringToMatchOne);\n  else if (\n    stringToSearch.indexOf(stringToMatchOne) >= 0 &&\n    stringToSearch.indexOf(stringToMatchTwo) >= 0\n  )\n    return stringToSearch.indexOf(stringToMatchOne) <\n      stringToSearch.indexOf(stringToMatchTwo)\n      ? stringToSearch.indexOf(stringToMatchOne)\n      : stringToSearch.indexOf(stringToMatchTwo);\n  else return -1;\n};\n\nconst findStartOfLeftNumber = (formulaString, operatorIndex) => {\n  let leftNumberStartIndex = operatorIndex - 1;\n  while (leftNumberStartIndex > 0) {\n    if (RegEx.operator.test(formulaString.charAt(leftNumberStartIndex))) {\n      leftNumberStartIndex++;\n      break;\n    } else leftNumberStartIndex--;\n  }\n  return leftNumberStartIndex;\n};\n\nconst findEndOfRightNumber = (formulaString, operatorIndex) => {\n  let rightNumberEndIndex = operatorIndex + 1;\n  while (rightNumberEndIndex < formulaString.length - 1) {\n    if (RegEx.operator.test(formulaString.charAt(rightNumberEndIndex))) {\n      rightNumberEndIndex--;\n      break;\n    } else rightNumberEndIndex++;\n  }\n  return rightNumberEndIndex;\n};\n\nconst findLeftNumber = (formulaString, numberStartIndex, operatorIndex) => {\n  return formulaString\n    .slice(numberStartIndex, operatorIndex)\n    .replace(\n      Character.NEGATIVECHARACTER,\n      Character.STRINGMATHNEGATIVECHARACTER\n    );\n};\n\nconst findRightNumber = (formulaString, operatorIndex, numberEndIndex) => {\n  return formulaString\n    .slice(operatorIndex + 1, numberEndIndex + 1)\n    .replace(\n      Character.NEGATIVECHARACTER,\n      Character.STRINGMATHNEGATIVECHARACTER\n    );\n};\n\nconst performStringMath = (numStringOne, operatorString, numStringTwo) => {\n  let numOne = Number(numStringOne);\n  let numTwo = Number(numStringTwo);\n\n  if (operatorString == Character.ADDCHARACTER) {\n    let result = numOne + numTwo;\n    return result\n      .toString()\n      .replace(Character.SUBTRACTCHARACTER, Character.NEGATIVECHARACTER);\n  } else if (operatorString == Character.SUBTRACTCHARACTER) {\n    let result = numOne - numTwo;\n    return result\n      .toString()\n      .replace(Character.SUBTRACTCHARACTER, Character.NEGATIVECHARACTER);\n  } else if (operatorString == Character.MULTIPLYCHARACTER) {\n    let result = numOne * numTwo;\n    return result\n      .toString()\n      .replace(Character.SUBTRACTCHARACTER, Character.NEGATIVECHARACTER);\n  } else if (operatorString == Character.DIVIDECHARACTER) {\n    let result = numOne / numTwo;\n    return result\n      .toString()\n      .replace(Character.SUBTRACTCHARACTER, Character.NEGATIVECHARACTER);\n  } else if (operatorString == Character.EXPONENTCHARACTER) {\n    let result = Math.pow(numOne, numTwo);\n    return result\n      .toString()\n      .replace(Character.SUBTRACTCHARACTER, Character.NEGATIVECHARACTER);\n  } else return \"\";\n};\n\nconst performOperation = (formulaString, operatorIndex) => {\n  console.log(formulaString);\n  let leftNumberStartIndex = findStartOfLeftNumber(\n    formulaString,\n    operatorIndex\n  );\n  let rightNumberEndIndex = findEndOfRightNumber(formulaString, operatorIndex);\n\n  let leftNumber = findLeftNumber(\n    formulaString,\n    leftNumberStartIndex,\n    operatorIndex\n  );\n  let rightNumber = findRightNumber(\n    formulaString,\n    operatorIndex,\n    rightNumberEndIndex\n  );\n\n  let resultOfOperation = performStringMath(\n    leftNumber,\n    formulaString.charAt(operatorIndex),\n    rightNumber\n  );\n\n  console.log(\"leftNumber is: \" + leftNumber);\n  console.log(\"rightNumber is: \" + rightNumber);\n  console.log(\"result is: \" + resultOfOperation);\n\n  return formulaString\n    .slice(0, leftNumberStartIndex)\n    .concat(resultOfOperation)\n    .concat(formulaString.slice(rightNumberEndIndex + 1));\n};\n\nconst performPOfPEMDAS = formulaString => {\n  let closeParenIndex = 0;\n  let openParenIndex = 0;\n\n  while (RegEx.parens.test(formulaString)) {\n    for (let i = 0; i < formulaString.length; i++) {\n      if (formulaString[i] == Character.RIGHTPARENCHARACTER) {\n        closeParenIndex = i;\n        break;\n      }\n    }\n\n    for (let i = closeParenIndex; i >= 0; i--) {\n      if (formulaString[i] == Character.LEFTPARENCHARACTER) {\n        openParenIndex = i;\n        break;\n      }\n    }\n\n    formulaString = formulaString\n      .slice(0, openParenIndex)\n      .concat(\n        performPEMDAS(formulaString.slice(openParenIndex + 1, closeParenIndex))\n      )\n      .concat(formulaString.slice(closeParenIndex + 1));\n  }\n  return formulaString;\n};\n\nconst performEOfPEMDAS = formulaString => {\n  let operatorIndex = 0;\n\n  while (formulaString.indexOf(Character.EXPONENTCHARACTER) >= 0) {\n    operatorIndex = formulaString.indexOf(Character.EXPONENTCHARACTER);\n    formulaString = performOperation(formulaString, operatorIndex);\n  }\n  return formulaString;\n};\n\nconst performMDOfPEMDAS = formulaString => {\n  let operatorIndex = 0;\n\n  while (RegEx.multiplyDivide.test(formulaString)) {\n    operatorIndex = indexOfFirstMatch(\n      formulaString,\n      Character.MULTIPLYCHARACTER,\n      Character.DIVIDECHARACTER\n    );\n    formulaString = performOperation(formulaString, operatorIndex);\n  }\n  return formulaString;\n};\n\nconst performASOfPEMDAS = formulaString => {\n  let operatorIndex = 0;\n\n  while (RegEx.addSubtract.test(formulaString)) {\n    operatorIndex = indexOfFirstMatch(\n      formulaString,\n      Character.ADDCHARACTER,\n      Character.SUBTRACTCHARACTER\n    );\n    formulaString = performOperation(formulaString, operatorIndex);\n  }\n  return formulaString;\n};\n\nexport default function performPEMDAS(formulaString) {\n  let parenBalance = 0;\n\n  for (let i = 0; i < formulaString.length; i++) {\n    if (formulaString[i] == Character.LEFTPARENCHARACTER) parenBalance++;\n    else if (formulaString[i] == Character.RIGHTPARENCHARACTER) parenBalance--;\n  }\n\n  if (parenBalance != 0) return Error.UNBALANCEDPARENTHESESERROR;\n  else\n    return performASOfPEMDAS(\n      performMDOfPEMDAS(performEOfPEMDAS(performPOfPEMDAS(formulaString)))\n    );\n}\n","import * as RegEx from \"./regularExpression.js\";\nimport * as Character from \"./buttonCharacters.js\";\n\nconst cleanEndingOperators = formulaString => {\n  let str = JSON.parse(JSON.stringify(formulaString));\n\n  while (RegEx.operator.test(str.charAt(str.length - 1))) {\n    str = str.slice(0, str.length - 2);\n  }\n\n  return str;\n};\n\nconst cleanConsecutiveOperators = formulaString => {\n  let str = JSON.parse(JSON.stringify(formulaString));\n  let count = 0;\n\n  while (RegEx.consecutiveOperator.test(str)) {\n    if (\n      RegEx.operator.test(str.charAt(count)) &&\n      RegEx.multiplyDivideAdd.test(str.charAt(count + 1))\n    ) {\n      str = str.slice(0, count).concat(str.slice(count + 1));\n      count = 0;\n    } else {\n      count++;\n    }\n  }\n  return str;\n};\n\nconst cleanDoubleNegatives = formulaString => {\n  let searchString = Character.NEGATIVECHARACTER.concat(\n    Character.NEGATIVECHARACTER\n  );\n  let doubleNegativeIndex = formulaString.search(searchString);\n\n  while (doubleNegativeIndex >= 0) {\n    if (doubleNegativeIndex == 0)\n      formulaString = formulaString.slice(doubleNegativeIndex + 2);\n    else\n      formulaString = formulaString\n        .slice(0, doubleNegativeIndex)\n        .concat(formulaString.slice(doubleNegativeIndex + 2));\n\n    doubleNegativeIndex = formulaString.search(searchString);\n  }\n  return formulaString;\n};\n\nexport default function cleanMisplacedOperators(formulaString) {\n  return cleanDoubleNegatives(\n    cleanConsecutiveOperators(cleanEndingOperators(formulaString))\n  );\n}\n","import performPEMDAS from \"./performPEMDAS.js\";\nimport cleanMisplacedOperators from \"./cleanMisplacedOperators.js\";\n\nexport default function equalsFunction(state) {\n  let resultString = performPEMDAS(\n    cleanMisplacedOperators(JSON.parse(JSON.stringify(state.infixText)))\n  );\n\n  return {\n    ...state,\n    infixText: state.infixText,\n    polishText: state.polishText,\n    resultText: resultString\n  };\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport CharacterInputButton from \"./components/characterInputButton.js\";\nimport PerformFunctionButton from \"./components/performFunctionButton.js\";\nimport FormulaInputField from \"./components/formulaInputField.js\";\nimport ResultField from \"./components/resultField.js\";\nimport TitleAndHelp from \"./components/titleAndHelp.js\";\nimport backspaceFunction from \"./resources/backspaceFunction.js\";\nimport clearFunction from \"./resources/clearFunction.js\";\nimport equalsFunction from \"./resources/equalsFunction.js\";\nimport * as Character from \"./resources/buttonCharacters.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"calcGrid\">\n        <div id=\"titleAndHelpDiv\">\n          <TitleAndHelp />\n        </div>\n        <div id=\"infixInputDiv\" className=\"formulaInput\">\n          <FormulaInputField inputID=\"infixInput\" type=\"infix\" />\n        </div>\n\n        <div id=\"polishInputDiv\" className=\"formulaInput\">\n          <FormulaInputField inputID=\"polishInput\" type=\"polish\" />\n        </div>\n\n        <div id=\"resultFieldDiv\">\n          <ResultField pID=\"resultP\" />\n        </div>\n\n        <div id=\"zeroDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"zero\"\n            character={Character.ZEROCHARACTER}\n            charCode={Character.ZEROCHARCODE}\n          />\n        </div>\n\n        <div id=\"oneDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"one\"\n            character={Character.ONECHARACTER}\n            charCode={Character.ONECHARCODE}\n          />\n        </div>\n\n        <div id=\"twoDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"two\"\n            character={Character.TWOCHARACTER}\n            charCode={Character.TWOCHARCODE}\n          />\n        </div>\n\n        <div id=\"threeDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"three\"\n            character={Character.THREECHARACTER}\n            charCode={Character.THREECHARCODE}\n          />\n        </div>\n\n        <div id=\"fourDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"four\"\n            character={Character.FOURCHARACTER}\n            charCode={Character.FOURCHARCODE}\n          />\n        </div>\n\n        <div id=\"fiveDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"five\"\n            character={Character.FIVECHARACTER}\n            charCode={Character.FIVECHARCODE}\n          />\n        </div>\n\n        <div id=\"sixDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"six\"\n            character={Character.SIXCHARACTER}\n            charCode={Character.SIXCHARCODE}\n          />\n        </div>\n\n        <div id=\"sevenDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"seven\"\n            character={Character.SEVENCHARACTER}\n            charCode={Character.SEVENCHARCODE}\n          />\n        </div>\n\n        <div id=\"eightDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"eight\"\n            character={Character.EIGHTCHARACTER}\n            charCode={Character.EIGHTCHARCODE}\n          />\n        </div>\n\n        <div id=\"nineDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"nine\"\n            character={Character.NINECHARACTER}\n            charCode={Character.NINECHARCODE}\n          />\n        </div>\n\n        <div id=\"decimalDiv\" className=\"numberButton\">\n          <CharacterInputButton\n            buttonID=\"decimal\"\n            character={Character.DECIMALCHARACTER}\n            charCode={Character.DECIMALCHARCODE}\n          />\n        </div>\n\n        <div id=\"addDiv\" className=\"operatorButton\">\n          <CharacterInputButton\n            buttonID=\"add\"\n            character={Character.ADDCHARACTER}\n            charCode={Character.ADDCHARCODE}\n          />\n        </div>\n\n        <div id=\"subtractDiv\" className=\"operatorButton\">\n          <CharacterInputButton\n            buttonID=\"subtract\"\n            character={Character.SUBTRACTCHARACTER}\n            charCode={Character.SUBTRACTCHARCODE}\n          />\n        </div>\n\n        <div id=\"multiplyDiv\" className=\"operatorButton\">\n          <CharacterInputButton\n            buttonID=\"multiply\"\n            character={Character.MULTIPLYCHARACTER}\n            charCode={Character.MULTIPLYCHARCODE}\n          />\n        </div>\n\n        <div id=\"divideDiv\" className=\"operatorButton\">\n          <CharacterInputButton\n            buttonID=\"divide\"\n            character={Character.DIVIDECHARACTER}\n            charCode={Character.DIVIDECHARCODE}\n          />\n        </div>\n\n        <div id=\"exponentDiv\" className=\"operatorButton\">\n          <CharacterInputButton\n            buttonID=\"exponent\"\n            character={Character.EXPONENTCHARACTER}\n            charCode={Character.EXPONENTCHARCODE}\n          />\n        </div>\n\n        <div id=\"negativeDiv\" className=\"operatorButton\">\n          <CharacterInputButton\n            buttonID=\"negative\"\n            character={Character.NEGATIVECHARACTER}\n            charCode={Character.NEGATIVECHARCODE}\n          />\n        </div>\n\n        <div id=\"leftParenDiv\" className=\"parenButton\">\n          <CharacterInputButton\n            buttonID=\"leftParen\"\n            character={Character.LEFTPARENCHARACTER}\n            charCode={Character.LEFTPARENCHARCODE}\n          />\n        </div>\n\n        <div id=\"rightParenDiv\" className=\"parenButton\">\n          <CharacterInputButton\n            buttonID=\"rightParen\"\n            character={Character.RIGHTPARENCHARACTER}\n            charCode={Character.RIGHTPARENCHARCODE}\n          />\n        </div>\n\n        <div id=\"backspaceDiv\" class=\"functionButton\">\n          <PerformFunctionButton\n            buttonID=\"backspace\"\n            character={Character.BACKSPACECHARACTER}\n            charCodes={Character.BACKSPACECHARCODES}\n            keyEvent={Character.BACKSPACEKEYEVENT}\n            function={backspaceFunction}\n          />\n        </div>\n\n        <div id=\"clearDiv\" class=\"functionButton\">\n          <PerformFunctionButton\n            buttonID=\"clear\"\n            character={Character.CLEARCHARACTER}\n            charCodes={Character.CLEARCHARCODES}\n            keyEvent={Character.CLEARKEYEVENT}\n            function={clearFunction}\n          />\n        </div>\n\n        <div id=\"equalsDiv\" class=\"functionButton\">\n          <PerformFunctionButton\n            buttonID=\"equals\"\n            character={Character.EQUALSCHARACTER}\n            charCodes={Character.EQUALSCHARCODES}\n            keyEvent={Character.EQUALSKEYEVENT}\n            function={equalsFunction}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport Store from \"./store\";\n\n//const StoreInstance = Store();\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}